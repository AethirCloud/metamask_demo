/*
 * @Description: 
 * @Version: 2.0
 * @Autor: Qiguangxin
 * @Date: 2024-04-22 09:53:56
 * @LastEditors: Qiguangxin
 * @LastEditTime: 2024-05-15 14:42:35
 */
// components/Layout.tsx

import Link from "next/link";
import { useRouter } from "next/router";
import Image from "next/image";
import styles from "../styles/layout.module.css";
import Header from "./Header";
import React, { useState, useEffect, useLayoutEffect } from "react";
import { getMyAccount } from "@/pages/api/dashboard";
const Layout = ({ children }: { children: React.ReactNode }) => {
  const router = useRouter();
  const [MyAccount, setMyAccount] = useState<any>([]);
  useEffect(() => {
    getMyAccount().then((res: any) => {
      setMyAccount(res.data);
    })
  }, []);
  const menuItems = [
    { path: '/dashboard', name: 'Dashboard' },
    { path: '/licenses', name: 'Licenses' },
    { path: '/activity', iconActive: '/img/Frame427320749.svg', name: 'Activity' },
    { path: '/claim', iconActive: '/img/Frame427320752.svg', name: 'Claim' },
    { path: '/withdraw', name: 'Withdraw' },
    { path: '/operators', name: 'Operators' }
  ];
  const svgDataArray = [
    "M2.67227 19.55C2.95342 19.8969 3.45439 19.9688 3.8217 19.7148L6.19237 18.0754C6.58037 17.8071 6.6774 17.2751 6.4091 16.8871C6.14079 16.4991 5.60874 16.402 5.22074 16.6703L3.52603 17.8422C2.37944 16.1826 1.70831 14.1706 1.70831 12C1.70831 10.9127 1.87692 9.86478 2.18943 8.88096L4.49422 9.9079C4.92512 10.0999 5.43007 9.90623 5.62207 9.47533C5.81406 9.04443 5.62039 8.53947 5.18949 8.34748L2.84117 7.30114C4.42538 4.21946 7.51924 2.04121 11.1458 1.74325V3.58611C11.1458 4.05785 11.5283 4.44027 12 4.44027C12.4717 4.44027 12.8542 4.05785 12.8542 3.58611V1.74321C14.1812 1.85212 15.4356 2.21255 16.5708 2.77628C16.9934 2.98609 17.506 2.81367 17.7158 2.39116C17.9256 1.96865 17.7532 1.45605 17.3306 1.24624C15.7237 0.448254 13.913 1.67238e-07 12 0C5.37258 -5.79387e-07 5.79387e-07 5.37258 0 12C-2.50022e-07 14.8599 1.00154 17.4882 2.67227 19.55ZM20.1612 19.7026C20.5287 19.9703 21.0415 19.9032 21.3277 19.55C22.9985 17.4882 24 14.8599 24 12C24 10.2588 23.6286 8.6021 22.96 7.10658C22.7674 6.67593 22.2622 6.48291 21.8316 6.67546C21.4009 6.86801 21.2079 7.37321 21.4004 7.80386C21.9729 9.08429 22.2917 10.5038 22.2917 12C22.2917 14.1633 21.6251 16.169 20.4856 17.8254L18.9167 16.6825C18.5354 16.4047 18.0011 16.4887 17.7234 16.8699C17.4456 17.2512 17.5295 17.7855 17.9108 18.0633L20.1612 19.7026ZM12.6454 13.2368C12.1455 13.7019 11.3632 13.6737 10.8981 13.1738C10.4329 12.6739 10.4611 11.8916 10.961 11.4265C10.96 11.4274 10.9601 11.4274 10.9614 11.4262C10.9664 11.4219 10.9903 11.4013 11.0414 11.3614C11.1009 11.315 11.1804 11.2555 11.2818 11.1822C11.4847 11.0354 11.7513 10.851 12.0747 10.6333C12.7204 10.1985 13.5597 9.65338 14.5032 9.05109C15.3241 8.52707 16.2179 7.96365 17.1223 7.39767C16.491 8.25543 15.8632 9.10273 15.2801 9.88063C14.6092 10.7756 14.0031 11.5711 13.5216 12.1824C13.2804 12.4885 13.0766 12.7407 12.915 12.9324C12.8343 13.0282 12.7689 13.1034 12.718 13.1595C12.673 13.2092 12.6503 13.2319 12.6458 13.2363L12.6458 13.2364C12.6448 13.2373 12.6447 13.2374 12.6454 13.2368ZM13.8091 14.4874C12.6185 15.5953 10.7552 15.5281 9.6474 14.3375C8.53958 13.1469 8.6067 11.2836 9.79732 10.1758C10.5495 9.47599 15.8552 6.1585 19.6611 3.8099C20.5319 3.27257 21.4922 4.30824 20.8909 5.13606C18.2642 8.75183 14.561 13.7878 13.8091 14.4874Z",
    "M9.62723 0.60082C9.54777 0.647185 9.4767 0.708522 9.41843 0.78268L0.584552 12.0258C0.542992 12.0756 0.507357 12.1318 0.479198 12.1938C0.406689 12.3533 0.39554 12.5251 0.435803 12.6826C0.452289 12.7474 0.477703 12.8105 0.512041 12.8699C0.531762 12.9041 0.554263 12.9368 0.579403 12.9676L9.41843 24.2173C9.47675 24.2915 9.54791 24.3529 9.62746 24.3993C9.73692 24.4633 9.86431 24.5 10.0003 24.5C10.2429 24.5 10.4582 24.3832 10.5931 24.2027L19.4256 12.9613C19.431 12.9545 19.4363 12.9476 19.4415 12.9407C19.616 12.7055 19.6336 12.3922 19.4944 12.1413C19.472 12.1009 19.4463 12.0633 19.4178 12.0287L10.5931 0.797295C10.4582 0.616826 10.2429 0.5 10.0003 0.5C10.0002 0.5 10.0002 0.5 10.0001 0.5C10.0001 0.5 10.0001 0.5 10 0.5C9.86737 0.5 9.739 0.5356 9.62723 0.60082ZM17.6838 12.2163L10.7399 3.37853V15.3726L17.6838 12.2163ZM16.3914 14.4287L10.7399 16.9975V21.6215L16.3914 14.4287ZM9.26061 21.6221V16.9978L3.60875 14.4288L9.26061 21.6221ZM2.31618 12.2163L9.26061 15.3729V3.37793L2.31618 12.2163Z", // SVG 1 的路径数据
    "M2.76923 2C3.19407 2 3.53846 2.3444 3.53846 2.76923V13.2198L8.37915 8.37915C8.67955 8.07874 9.1666 8.07874 9.46701 8.37915L12 10.9121L17.066 5.84615H15.0777C14.6529 5.84615 14.3085 5.50175 14.3085 5.07692C14.3085 4.65208 14.6529 4.30769 15.0777 4.30769H18.9228C18.923 4.30769 18.9232 4.30769 18.9234 4.30769H18.9239C19.3487 4.30769 19.6931 4.65208 19.6931 5.07692V8.92307C19.6931 9.34791 19.3487 9.6923 18.9239 9.6923C18.499 9.6923 18.1546 9.34791 18.1546 8.92307V6.93321L12.5439 12.5439C12.2435 12.8443 11.7565 12.8443 11.4561 12.5439L8.92308 10.0109L3.53846 15.3955V17.3846H21.2308C21.6556 17.3846 22 17.729 22 18.1538C22 18.5787 21.6556 18.9231 21.2308 18.9231H2.76923C2.3444 18.9231 2 18.5787 2 18.1538V15.0769V2.76923C2 2.3444 2.3444 2 2.76923 2Z", // SVG 2 的路径数据
    "M5.44182 5.44182C5.45348 5.43015 5.46931 5.42359 5.48581 5.42359H22.5142C22.5307 5.42359 22.5465 5.43015 22.5582 5.44182C22.5699 5.45348 22.5764 5.46931 22.5764 5.48581V19.8144L20.5105 18.7815C20.3101 18.6813 20.0742 18.6813 19.8738 18.7815L17.0961 20.1703L14.3183 18.7815C14.1179 18.6813 13.8821 18.6813 13.6817 18.7815L10.9039 20.1703L8.12619 18.7815C7.9258 18.6813 7.68993 18.6813 7.48954 18.7815L5.42359 19.8144V5.48581C5.42359 5.46931 5.43015 5.45348 5.44182 5.44182ZM5.48581 4C5.09175 4 4.71383 4.15654 4.43518 4.43518C4.15654 4.71383 4 5.09175 4 5.48581V20.9662C4 21.2128 4.12773 21.4419 4.33758 21.5716C4.54743 21.7013 4.80947 21.7131 5.03012 21.6028L7.80786 20.2139L10.5856 21.6028C10.786 21.703 11.0219 21.703 11.2223 21.6028L14 20.2139L16.7777 21.6028C16.9781 21.703 17.214 21.703 17.4144 21.6028L20.1921 20.2139L22.9699 21.6028C23.1905 21.7131 23.4526 21.7013 23.6624 21.5716C23.8723 21.4419 24 21.2128 24 20.9662V5.48581C24 5.09175 23.8435 4.71383 23.5648 4.43518C23.2862 4.15654 22.9083 4 22.5142 4H5.48581ZM15.7926 11.1201C15.4226 11.1201 15.1227 11.4865 15.1227 11.9385C15.1227 12.3906 15.4226 12.757 15.7926 12.757H20.1635C20.5335 12.757 20.8334 12.3906 20.8334 11.9385C20.8334 11.4865 20.5335 11.1201 20.1635 11.1201H15.7926ZM15.1227 15.4994C15.1227 15.0474 15.4226 14.6809 15.7926 14.6809H20.1635C20.5335 14.6809 20.8334 15.0474 20.8334 15.4994C20.8334 15.9514 20.5335 16.3179 20.1635 16.3179H15.7926C15.4226 16.3179 15.1227 15.9514 15.1227 15.4994ZM8.50714 9.34086C8.13715 9.34086 7.83722 9.7073 7.83722 10.1593V17.2795C7.83722 17.7315 8.13715 18.098 8.50714 18.098H12.8781C13.2481 18.098 13.548 17.7315 13.548 17.2795V10.1593C13.548 9.7073 13.2481 9.34086 12.8781 9.34086H8.50714ZM9.17707 16.461V10.9778H12.2081V16.461H9.17707Z",
    "M5.15829 5.2158C3.51726 6.11091 2.76923 7.2021 2.76923 8.19231C2.76923 9.18251 3.51726 10.2737 5.15829 11.1688C6.76587 12.0457 9.04715 12.6154 11.6154 12.6154C14.1836 12.6154 16.4649 12.0457 18.0725 11.1688C19.7135 10.2737 20.4615 9.18251 20.4615 8.19231C20.4615 7.2021 19.7135 6.11091 18.0725 5.2158C16.4649 4.33894 14.1836 3.76923 11.6154 3.76923C9.04715 3.76923 6.76587 4.33894 5.15829 5.2158ZM4.31109 3.6626C2.43028 4.6885 1 6.25115 1 8.19231V13.5V18.8077C1 20.7489 2.43032 22.3115 4.31114 23.3374C6.22542 24.3815 8.80952 25 11.6154 25C14.4213 25 17.0054 24.3815 18.9196 23.3374C20.8005 22.3115 22.2308 20.7489 22.2308 18.8077V13.5V8.19231C22.2308 6.25115 20.8005 4.6885 18.9197 3.6626C17.0054 2.61846 14.4213 2 11.6154 2C8.80946 2 6.22536 2.61846 4.31109 3.6626ZM20.4615 16.9682V18.8077C20.4615 19.7979 19.7135 20.8891 18.0724 21.7842C16.4648 22.6611 14.1836 23.2308 11.6154 23.2308C9.04721 23.2308 6.76593 22.6611 5.15833 21.7842C3.51728 20.8891 2.76923 19.7979 2.76923 18.8077V16.9682C3.22529 17.3673 3.74802 17.7226 4.31114 18.0297C6.22542 19.0739 8.80952 19.6923 11.6154 19.6923C14.4213 19.6923 17.0054 19.0739 18.9196 18.0297C19.4827 17.7226 20.0055 17.3673 20.4615 16.9682ZM2.76923 13.5C2.76923 14.4902 3.51728 15.5814 5.15833 16.4765C6.76593 17.3534 9.04721 17.9231 11.6154 17.9231C14.1836 17.9231 16.4648 17.3534 18.0724 16.4765C19.7135 15.5814 20.4615 14.4902 20.4615 13.5V11.6605C20.0055 12.0596 19.4828 12.4149 18.9197 12.722C17.0054 13.7662 14.4213 14.3846 11.6154 14.3846C8.80946 14.3846 6.22536 13.7662 4.31109 12.722C3.74799 12.4149 3.22527 12.0596 2.76923 11.6605V13.5Z",
    "M21.9395 19.7682C21.5672 17.5118 19.5616 15.8946 17.2767 16.0056C14.9918 16.1166 13.1543 17.9259 13.0072 20.2063C8.39839 20.0622 6.76204 18.9851 7.02926 16.7947C7.12834 15.9756 7.62375 15.5375 8.5335 15.3245C9.08595 15.1955 9.69846 15.1774 10.2539 15.2285C10.305 15.2345 10.359 15.2375 10.41 15.2435C10.7493 15.3245 11.0946 15.3935 11.4399 15.4475C12.4637 15.6155 13.5056 15.6995 14.4964 15.6455C17.2827 15.4955 19.1803 14.2683 19.2763 11.6639C19.3694 9.14047 17.634 7.35218 14.8357 6.15498C13.938 5.77092 12.9862 5.47387 12.0344 5.24883C11.605 5.14682 11.2447 5.07781 10.9775 5.0328C10.7403 2.75543 8.83074 1.01814 6.53986 1.00014C4.24897 0.982139 2.30937 2.68342 2.03314 4.95779C1.75692 7.23216 3.23413 9.3475 5.46197 9.87559C7.6898 10.4037 9.96268 9.17647 10.7373 7.02212C11.0195 7.07313 11.2988 7.13014 11.578 7.19615C12.4247 7.39418 13.2714 7.65823 14.052 7.99428C16.1748 8.90043 17.3337 10.0976 17.2797 11.5919C17.2317 12.9301 16.2709 13.5482 14.3913 13.6502C13.5656 13.6952 12.6619 13.6232 11.7702 13.4762C11.521 13.4342 11.2928 13.3922 11.0916 13.3472C10.9745 13.3231 10.8934 13.3021 10.8574 13.2931L10.7643 13.2751C10.6983 13.2661 10.5872 13.2511 10.4431 13.2361C9.69245 13.1671 8.87878 13.1911 8.08613 13.3742C6.42877 13.7612 5.26681 14.7904 5.05063 16.5487C4.57924 20.3353 7.41057 22.0906 13.3375 22.2166C14.2112 24.3289 16.5321 25.4541 18.7299 24.827C20.9307 24.1999 22.3118 22.0246 21.9395 19.7682ZM6.49482 8.00028C5.11368 8.00028 3.99376 6.8811 3.99376 5.50087C3.99376 4.12065 5.11368 3.00147 6.49482 3.00147C7.87596 3.00147 8.99588 4.12065 8.99588 5.50087C8.99588 6.8811 7.87596 8.00028 6.49482 8.00028ZM17.4989 22.9967C16.1177 22.9967 14.9978 21.8775 14.9978 20.4973C14.9978 19.1171 16.1177 17.9979 17.4989 17.9979C18.88 17.9979 19.9999 19.1171 19.9999 20.4973C19.9999 21.8775 18.88 22.9967 17.4989 22.9967Z",
  ]
  const mediumItem = [
    { path: 'https://twitter.com/aethircloud', iconInactive: '/img/SocialIcons.svg', name: 'X' },
    { path: 'https://discord.com/invite/aethircloud', iconInactive: '/img/SocialIcons(1).svg', name: 'Discord' },
    { path: 'https://docs.aethir.com/', iconInactive: '/img/Vector(2).svg', name: 'Gitbook' },
  ];
  type MenuItemProps = {
    item: {
      path: string;
      iconActive: string;
      iconInactive: string;
      name: string;
    };
    handleMouseEnter: (item: { path: string }) => void;
    handleMouseLeave: () => void;
    isHovered: boolean;
    index: any;

  };
  const MenuItem: React.FC<MenuItemProps> = ({ item, handleMouseEnter, handleMouseLeave, isHovered, index }) => {
    const src = (isHovered || router.pathname === item.path) ? item.iconActive : item.iconInactive;

    return (
      <>
        <svg key={index} xmlns="http://www.w3.org/2000/svg" width="24" height="27" viewBox="0 0 24 24" fill="none" className="m-auto mb-1">
          <path fillRule="evenodd" clipRule="evenodd" d={svgDataArray[index]} fill="#BFBFBF" className={`m-auto hover:fill-black ${isHovered || router.pathname === item.path || item.path === 'https://docs.aethir.com/' ? 'fill-black' : ''}`} />
        </svg>
      </>
    );
  };
  const [hoveredItem, setHoveredItem] = useState<string | null>(null);;

  const handleMouseEnter = (item: { path: string }) => {
    setHoveredItem(item.path);
  };

  const handleMouseLeave = () => {
    setHoveredItem(null);
  };
  const handleClick = (item: { path: string }) => {
    router.push(item.path);
  };
  return (
    <div className={styles.layout}>
      <div className={styles.sidebar}>
        <div className={`flex justify-center px-[18px]`}>
          <Image
            alt=""
            src='/img/logo.png'
            width={105}
            height={92}
          />
        </div>
        <ul className={styles.sidebarMenu}>
          {menuItems.map((item, index) => (
            <li
              key={index}
              className={`flex flex-col items-center text-center  ${router.pathname === item.path ? styles.active : ''}`}
              onMouseEnter={() => handleMouseEnter(item)}
              onMouseLeave={handleMouseLeave}
              onClick={() => handleClick(item)}
              role="button"
            >
              <MenuItem
                item={item}
                handleMouseEnter={handleMouseEnter}
                handleMouseLeave={handleMouseLeave}
                isHovered={hoveredItem === item.path}
                index={index}
              />
              {item.name}
            </li>
          ))}
          <a href="https://docs.aethir.com/" target="_blank">
            <li className={`flex flex-col items-center text-center text-[#1C2925] cursor-pointer 2xl:mt-[136px]`}>
              <svg xmlns="http://www.w3.org/2000/svg" width="27" height="27" viewBox="0 0 27 27" fill="none" className={`mb-1`}>
                <path fillRule="evenodd" clipRule="evenodd" d="M13.209 2.38672C7.13385 2.38672 2.20898 7.31159 2.20898 13.3867C2.20898 19.4618 7.13385 24.3867 13.209 24.3867C19.2841 24.3867 24.209 19.4618 24.209 13.3867C24.209 7.31159 19.2841 2.38672 13.209 2.38672ZM0.208984 13.3867C0.208984 6.20702 6.02928 0.386719 13.209 0.386719C20.3887 0.386719 26.209 6.20702 26.209 13.3867C26.209 20.5664 20.3887 26.3867 13.209 26.3867C6.02928 26.3867 0.208984 20.5664 0.208984 13.3867Z" fill="#1C2925" />
                <path d="M13.1328 21.2441C13.8191 21.2441 14.3755 20.6816 14.3755 19.9877C14.3755 19.2937 13.8191 18.7312 13.1328 18.7312C12.4465 18.7312 11.8901 19.2937 11.8901 19.9877C11.8901 20.6816 12.4465 21.2441 13.1328 21.2441Z" fill="#1C2925" />
                <path fillRule="evenodd" clipRule="evenodd" d="M8.16211 10.9401C8.16211 8.32055 10.5168 6.41675 13.1328 6.41675C15.7488 6.41675 18.1035 8.32055 18.1035 10.9401C18.1035 13.2219 16.3168 14.9607 14.1269 15.371V15.4634C14.1269 16.0185 13.6818 16.4685 13.1328 16.4685C12.5838 16.4685 12.1387 16.0185 12.1387 15.4634V14.4582C12.1387 13.903 12.5838 13.453 13.1328 13.453C14.9084 13.453 16.1152 12.2056 16.1152 10.9401C16.1152 9.67455 14.9084 8.42711 13.1328 8.42711C11.3572 8.42711 10.1504 9.67455 10.1504 10.9401V11.4426C10.1504 11.9978 9.70529 12.4478 9.15625 12.4478C8.6072 12.4478 8.16211 11.9978 8.16211 11.4426V10.9401Z" fill="#1C2925" />
              </svg>
              FAQ
            </li>
          </a>
        </ul>
        <div className={`divider m-[0] h-[0]`}></div>
        <ul className={`${styles.mediumMenu} mt-[20px]`}>
          {mediumItem.map((item, index) => (
            <li key={index} className={`flex flex-col items-center text-center mb-[27px]`}>
              <a target="_blank" href={item.path} rel="noreferrer">
                <Image
                  alt=""
                  src={item.iconInactive}
                  width={24}
                  height={24}
                  className="m-auto mb-1"
                />
                {item.name}
              </a>
            </li>
          ))}
        </ul>
      </div>

      <div className={styles.contentWrapper}>
        <Header MyAccount={MyAccount} />
        <div className={`${styles.content} flex py-[26px] px-[35px] xl:py-[20px] xl:px-[18px] 2xl:py-[27px] 2xl:px-[24px]`}
          style={{
            background: 'rgba(243, 247, 235, 1)',
          }}>
          {children}
        </div>
      </div>

    </div>
  );
};

export default Layout;
